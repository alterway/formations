---

apiVersion: v1
kind: Namespace
metadata:
  name: expert-ns
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-html-config
  namespace: expert-ns
data:
  # Le contenu que le sidecar doit récupérer et servir
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
    <title>Configuration Loaded!</title>
    </head>
    <body>
    <h1>Success! The sidecar has successfully fetched the configuration.</h1>
    </body>
    </html>
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-service-account
  namespace: expert-ns

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-reader-role
  namespace: expert-ns
rules:
- apiGroups: [""] # "" indique l'API core
  resources: ["configmaps"]
  verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-role-binding
  namespace: expert-ns
subjects:
- kind: ServiceAccount
  name: app-service-account
  namespace: expert-ns
roleRef:
  kind: Role
  name: configmap-reader-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  namespace: expert-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      volumes:
      - name: shared-html
        emptyDir: {}

      containers:
      - name: main-app
        image: nginx:1.21.6
        ports:
        - containerPort: 80
        volumeMounts:
        - name: shared-html
          mountPath: /usr/share/nginx/html

      - name: config-loader-sidecar
        # On utilise une image kubectl pour simuler un client API
        image: bitnami/kubectl:1.23
        # Cette commande tente de lire le configmap et d'écrire son contenu
        # dans le volume partagé. Elle échouera en boucle à cause des permissions.
        command:
        - /bin/sh
        - -c
        - |
          echo "Attempting to fetch configuration...";
          while true; do
            kubectl get configmap app-html-config -n expert-ns -o jsonpath='{.data.index\.html}' > /mnt/html/index.html;
            if [ $? -eq 0 ]; then
              echo "Configuration successfully written.";
              sleep 3600; # On a réussi, on attend
            else
              echo "Failed to fetch configmap. Retrying in 10 seconds...";
              sleep 10;
            fi
          done
        volumeMounts:
        - name: shared-html
          mountPath: /mnt/html
---

